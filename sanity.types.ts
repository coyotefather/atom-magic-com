/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Timeline = {
  _id: string;
  _type: "timeline";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  URL?: string;
  icon?: "person" | "people" | "map" | "waves" | "mountain" | "swords" | "shield" | "tree" | "bird" | "wolf" | "snake" | "fire" | "poison" | "hammer" | "atom" | "nuke";
  description?: string;
  major?: boolean;
  year?: number;
};

export type Patronage = {
  _id: string;
  _type: "patronage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  titleLatin?: string;
  epithet?: string;
  epithetLatin?: string;
  entry?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "entry";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  effects?: Array<{
    title?: string;
    titleLatin?: string;
    polarity?: "positive" | "negative";
    level?: "I" | "II" | "III";
    description?: string;
    _type: "effect";
    _key: string;
  }>;
  description?: string;
};

export type Path = {
  _id: string;
  _type: "path";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  latin?: string;
  entry?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "entry";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  modifiers?: Array<{
    modifierSubscore?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "subscore";
    };
    modifierValue?: number;
    _type: "modifier";
    _key: string;
  }>;
  description?: string;
};

export type Subscore = {
  _id: string;
  _type: "subscore";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  score?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "score";
  };
  defaultValue?: number;
  description?: string;
};

export type Score = {
  _id: string;
  _type: "score";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  id?: string;
  subscores?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "subscore";
  }>;
  description?: string;
};

export type Culture = {
  _id: string;
  _type: "culture";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  entry?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "entry";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  aspects?: Array<{
    aspectName?: string;
    aspectId?: string;
    aspectContentSlug?: string;
    aspectDescription?: string;
    _type: "aspect";
    _key: string;
  }>;
  description?: string;
};

export type Entry = {
  _id: string;
  _type: "entry";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  publishedAt?: string;
  cardDetails?: Array<{
    detailName?: string;
    detailDescription?: string;
    _type: "cardDetail";
    _key: string;
  }>;
  description?: string;
  toc?: string;
  entryBody?: string;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  publishedAt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  chipColor?: Color;
  description?: string;
  parent?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type Markdown = string;

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Timeline | Patronage | Path | Subscore | Score | Culture | Entry | Post | Author | Category | Slug | BlockContent | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Color | RgbaColor | HsvaColor | HslaColor | Markdown;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current)][0...12]{  _id, title, slug}
export type POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
}>;
// Variable: POST_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]{  title, body, mainImage, categories[]->{title, slug}}
export type POST_QUERYResult = {
  title: string | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  categories: Array<{
    title: string | null;
    slug: Slug | null;
  }> | null;
} | null;
// Variable: ENTRIES_QUERY
// Query: *[_type == "entry" && defined(slug.current)][0...12]{  _id, title, slug, description}
export type ENTRIES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
}>;
// Variable: ENTRIES_COUNT_QUERY
// Query: count(*[_type == 'entry'])
export type ENTRIES_COUNT_QUERYResult = number;
// Variable: ENTRY_QUERY
// Query: *[_type == "entry" && slug.current == $slug][0]{  title, cardDetails, entryBody, toc, mainImage, publishedAt, author->{name, slug}, category->{title, slug, parent->{title, slug, parent->{title, slug, parent->{title, slug, parent->{}}}}}}
export type ENTRY_QUERYResult = {
  title: string | null;
  cardDetails: Array<{
    detailName?: string;
    detailDescription?: string;
    _type: "cardDetail";
    _key: string;
  }> | null;
  entryBody: string | null;
  toc: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  author: {
    name: string | null;
    slug: Slug | null;
  } | null;
  category: {
    title: string | null;
    slug: Slug | null;
    parent: {
      title: string | null;
      slug: Slug | null;
      parent: {
        title: string | null;
        slug: Slug | null;
        parent: {
          title: string | null;
          slug: Slug | null;
          parent: {} | null;
        } | null;
      } | null;
    } | null;
  } | null;
} | null;
// Variable: CULTURES_QUERY
// Query: *[_type == "culture"]{  _id, title, entry->{ slug }, aspects, mainImage, description}
export type CULTURES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  entry: {
    slug: Slug | null;
  } | null;
  aspects: Array<{
    aspectName?: string;
    aspectId?: string;
    aspectContentSlug?: string;
    aspectDescription?: string;
    _type: "aspect";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  description: string | null;
}>;
// Variable: SCORES_QUERY
// Query: *[_type == "score"]| order(title asc){  _id, title, id, subscores[]->{_id, title, id, defaultValue, description}, description}
export type SCORES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  id: string | null;
  subscores: Array<{
    _id: string;
    title: string | null;
    id: null;
    defaultValue: number | null;
    description: string | null;
  }> | null;
  description: string | null;
}>;
// Variable: SUBSCORES_QUERY
// Query: *[_type == "subscore"]{  _id, title, score->{_id, title, id}, defaultValue, description}
export type SUBSCORES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  score: {
    _id: string;
    title: string | null;
    id: string | null;
  } | null;
  defaultValue: number | null;
  description: string | null;
}>;
// Variable: PATHS_QUERY
// Query: *[_type == "path"]{  _id, title, latin, entry, mainImage, modifiers[]{ modifierSubscore->{ _id, title, score->{ _id, title } }, modifierValue}, description}
export type PATHS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  latin: string | null;
  entry: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "entry";
  } | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  modifiers: Array<{
    modifierSubscore: {
      _id: string;
      title: string | null;
      score: {
        _id: string;
        title: string | null;
      } | null;
    } | null;
    modifierValue: number | null;
  }> | null;
  description: string | null;
}>;
// Variable: PATRONAGES_QUERY
// Query: *[_type == "patronage"]{  _id, title, titleLatin, epithet, epithetLatin, entry, mainImage, effects[]->{ title, titleLatin, polarity, level, description }, description}
export type PATRONAGES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  titleLatin: string | null;
  epithet: string | null;
  epithetLatin: string | null;
  entry: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "entry";
  } | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  effects: Array<null> | null;
  description: string | null;
}>;
// Variable: CATEGORIES_QUERY
// Query: *[_type == "category" && defined(slug.current)][0...12]{  _id, title, slug, description}
export type CATEGORIES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
}>;
// Variable: CATEGORY_QUERY
// Query: *[_type == "category" && slug.current == $slug][0]{  _id, title, slug, description, parent->{title, slug}, "entries": *[_type == "entry" && references(^._id)]| order(_id) [0...96]{_id, title, slug, description}, "children": *[_type == "category" && references(^._id)]{_id, title, slug, description},}
export type CATEGORY_QUERYResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  parent: {
    title: string | null;
    slug: Slug | null;
  } | null;
  entries: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    description: string | null;
  }>;
  children: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    description: string | null;
  }>;
} | null;
// Variable: TIMELINE_QUERY
// Query: *[_type == "timeline"]| order(year desc) {  _id, title, URL, year, major, icon, description}
export type TIMELINE_QUERYResult = Array<{
  _id: string;
  title: string | null;
  URL: string | null;
  year: number | null;
  major: boolean | null;
  icon: "atom" | "bird" | "fire" | "hammer" | "map" | "mountain" | "nuke" | "people" | "person" | "poison" | "shield" | "snake" | "swords" | "tree" | "waves" | "wolf" | null;
  description: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"post\" && defined(slug.current)][0...12]{\n  _id, title, slug\n}": POSTS_QUERYResult;
    "*[_type == \"post\" && slug.current == $slug][0]{\n  title, body, mainImage, categories[]->{title, slug}\n}": POST_QUERYResult;
    "*[_type == \"entry\" && defined(slug.current)][0...12]{\n  _id, title, slug, description\n}": ENTRIES_QUERYResult;
    "count(*[_type == 'entry'])": ENTRIES_COUNT_QUERYResult;
    "*[_type == \"entry\" && slug.current == $slug][0]{\n  title, cardDetails, entryBody, toc, mainImage, publishedAt, author->{name, slug}, category->{title, slug, parent->{title, slug, parent->{title, slug, parent->{title, slug, parent->{}}}}}\n}": ENTRY_QUERYResult;
    "*[_type == \"culture\"]{\n  _id, title, entry->{ slug }, aspects, mainImage, description\n}": CULTURES_QUERYResult;
    "*[_type == \"score\"]| order(title asc){\n  _id, title, id, subscores[]->{_id, title, id, defaultValue, description}, description\n}": SCORES_QUERYResult;
    "*[_type == \"subscore\"]{\n  _id, title, score->{_id, title, id}, defaultValue, description\n}": SUBSCORES_QUERYResult;
    "*[_type == \"path\"]{\n  _id, title, latin, entry, mainImage, modifiers[]{ modifierSubscore->{ _id, title, score->{ _id, title } }, modifierValue}, description\n}": PATHS_QUERYResult;
    "*[_type == \"patronage\"]{\n  _id, title, titleLatin, epithet, epithetLatin, entry, mainImage, effects[]->{ title, titleLatin, polarity, level, description }, description\n}": PATRONAGES_QUERYResult;
    "*[_type == \"category\" && defined(slug.current)][0...12]{\n  _id, title, slug, description\n}": CATEGORIES_QUERYResult;
    "*[_type == \"category\" && slug.current == $slug][0]{\n  _id, title, slug, description, parent->{title, slug}, \"entries\": *[_type == \"entry\" && references(^._id)]| order(_id) [0...96]{_id, title, slug, description}, \"children\": *[_type == \"category\" && references(^._id)]{_id, title, slug, description},\n}": CATEGORY_QUERYResult;
    "*[_type == \"timeline\"]| order(year desc) {\n  _id, title, URL, year, major, icon, description\n}": TIMELINE_QUERYResult;
  }
}
